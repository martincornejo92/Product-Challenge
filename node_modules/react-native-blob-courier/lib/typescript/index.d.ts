import './Extensions';
import type { BlobFetchRequest, BlobRequestSettings, BlobFetchResponse, BlobUploadRequest, BlobUploadResponse, AndroidDownloadManagerSettings, BlobProgressEvent, BlobMultipartMapUploadRequest, BlobFetchInput, BlobUploadInput } from './ExposedTypes';
declare type BlobUploadMultipartInput = BlobMultipartMapUploadRequest & BlobRequestSettings;
declare const _default: {
    fetchBlob: (input: BlobFetchInput) => Promise<BlobFetchResponse>;
    onProgress: (fn: (e: BlobProgressEvent) => void) => {
        fetchBlob: (input: BlobFetchRequest) => Promise<BlobFetchResponse>;
        uploadBlob: (input: BlobUploadRequest) => Promise<BlobUploadResponse>;
        uploadParts: (input: BlobUploadMultipartInput) => Promise<BlobUploadResponse>;
        useDownloadManagerOnAndroid: (downloadManagerSettings?: AndroidDownloadManagerSettings | undefined) => {
            fetchBlob: (input: BlobFetchRequest) => Promise<BlobFetchResponse>;
        };
    };
    settings: (input: BlobRequestSettings) => {
        fetchBlob: (input: BlobFetchRequest) => Promise<BlobFetchResponse>;
        onProgress: (fn: (e: BlobProgressEvent) => void) => {
            fetchBlob: (input: BlobFetchRequest) => Promise<BlobFetchResponse>;
            uploadBlob: (input: BlobUploadRequest) => Promise<BlobUploadResponse>;
            uploadParts: (input: BlobUploadMultipartInput) => Promise<BlobUploadResponse>;
            useDownloadManagerOnAndroid: (downloadManagerSettings?: AndroidDownloadManagerSettings | undefined) => {
                fetchBlob: (input: BlobFetchRequest) => Promise<BlobFetchResponse>;
            };
        };
        uploadBlob: (input: BlobUploadRequest) => Promise<BlobUploadResponse>;
        uploadParts: (input: BlobUploadMultipartInput) => Promise<BlobUploadResponse>;
        useDownloadManagerOnAndroid: (downloadManagerSettings?: AndroidDownloadManagerSettings | undefined) => {
            fetchBlob: (input: BlobFetchRequest) => Promise<BlobFetchResponse>;
        };
    };
    uploadBlob: (input: BlobUploadInput) => Promise<BlobUploadResponse>;
    uploadParts: (input: BlobUploadMultipartInput) => Promise<BlobUploadResponse>;
    useDownloadManagerOnAndroid: (downloadManagerSettings: AndroidDownloadManagerSettings) => {
        fetchBlob: (input: BlobFetchRequest) => Promise<BlobFetchResponse>;
    };
};
export default _default;
export * from './ExposedTypes';
export * from './ExposedConsts';
