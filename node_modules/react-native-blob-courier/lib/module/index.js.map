{"version":3,"names":["NativeEventEmitter","NativeModules","BLOB_COURIER_PROGRESS_EVENT_NAME","BLOB_FETCH_FALLBACK_PARAMETERS","BLOB_MULTIPART_UPLOAD_FALLBACK_PARAMETERS","DEFAULT_FILE_MULTIPART_FIELD_NAME","convertMappedMultipartsWithSymbolizedKeysToArray","sanitizeMappedMultiparts","uuid","dict","BlobCourier","BlobCourierEventEmitter","EventEmitter","createTaskId","addProgressListener","taskId","fn","addListener","e","parsedEvent","written","parseInt","total","sanitizeSettingsData","input","progressIntervalMilliseconds","sanitizeFetchData","android","filename","headers","ios","method","mimeType","url","settings","request","optionalRequestParameters","fallback","stringifyPartsValues","parts","stringify","part","type","payload","JSON","map","sanitizeMultipartUploadData","returnResponse","wrapAbortListener","wrappedFn","signal","originalSignalOnAbort","onabort","ev","call","cancelRequest","console","debug","wrapEmitter","fnOnProgress","emitterSubscription","undefined","result","remove","emitterWrappedFetch","fetchBlob","onProgress","emitterWrappedUpload","uploadBlobFromParts","sanitized","uploadBlob","Promise","reject","uploadParts","absoluteFilePath","multipartName","requestSettings","useDownloadManagerOnAndroid","downloadManagerSettings","downloadManager","useDownloadManager"],"sources":["index.tsx"],"sourcesContent":["/**\n * Copyright (c) Ely Deckers.\n *\n * This source code is licensed under the MPL-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { NativeEventEmitter, NativeModules } from 'react-native';\nimport {\n  BLOB_COURIER_PROGRESS_EVENT_NAME,\n  BLOB_FETCH_FALLBACK_PARAMETERS,\n  BLOB_MULTIPART_UPLOAD_FALLBACK_PARAMETERS,\n  DEFAULT_FILE_MULTIPART_FIELD_NAME,\n} from './Consts';\nimport './Extensions';\nimport type {\n  BlobFetchRequest,\n  BlobRequestSettings,\n  BlobRequestTask,\n  BlobFetchResponse,\n  BlobUploadRequest,\n  BlobUploadResponse,\n  AndroidDownloadManagerSettings,\n  BlobProgressEvent,\n  BlobRequestOnProgress,\n  BlobMultipartMapUploadRequest,\n  BlobMultipartArrayUploadRequest,\n  BlobNamedMultipartArray,\n  BlobMultipartWithName,\n  BlobFetchInput,\n  BlobUploadInput,\n} from './ExposedTypes';\nimport {\n  convertMappedMultipartsWithSymbolizedKeysToArray,\n  sanitizeMappedMultiparts,\n  uuid,\n} from './Utils';\nimport { dict } from './Extensions';\n\ntype BlobCancelNativeInput = BlobRequestTask;\n\ntype BlobFetchNativeInput = BlobFetchInput & BlobRequestTask;\n\ntype BlobUploadNativeInput = BlobUploadInput & BlobRequestTask;\n\ntype BlobUploadMultipartInput = BlobMultipartMapUploadRequest &\n  BlobRequestSettings;\n\ntype BlobUploadMultipartInputWithTask = BlobMultipartMapUploadRequest &\n  BlobRequestSettings &\n  BlobRequestTask;\n\ntype BlobUploadMultipartNativeInput = BlobMultipartArrayUploadRequest &\n  BlobRequestSettings &\n  BlobRequestTask;\n\ntype BlobCourierType = {\n  cancelRequest(input: BlobCancelNativeInput): Promise<{}>;\n  fetchBlob(input: BlobFetchNativeInput): Promise<BlobFetchResponse>;\n  uploadBlob(\n    input: BlobUploadMultipartNativeInput\n  ): Promise<BlobUploadResponse>;\n};\n\nconst { BlobCourier, BlobCourierEventEmitter } = NativeModules;\n\nconst EventEmitter = new NativeEventEmitter(BlobCourierEventEmitter);\n\nconst createTaskId = () => `rnbc-req-${uuid()}`;\n\nconst addProgressListener = (\n  taskId: string,\n  fn: (e: BlobProgressEvent) => void\n) =>\n  EventEmitter.addListener(BLOB_COURIER_PROGRESS_EVENT_NAME, (e: any) => {\n    const parsedEvent: BlobProgressEvent = {\n      written: parseInt(e.written, 10),\n      total: parseInt(e.total, 10),\n    };\n\n    if (e.taskId === taskId) {\n      fn(parsedEvent);\n    }\n  });\n\nconst sanitizeSettingsData = <T extends BlobRequestSettings>(\n  input: Readonly<T>\n) => {\n  const { progressIntervalMilliseconds } = input;\n\n  return {\n    progressIntervalMilliseconds,\n  };\n};\n\nconst sanitizeFetchData = <T extends BlobFetchNativeInput>(\n  input: Readonly<T>\n): BlobFetchNativeInput => {\n  const { android, filename, headers, ios, method, mimeType, taskId, url } =\n    input;\n\n  const settings = sanitizeSettingsData(input);\n\n  const request = {\n    filename,\n    mimeType,\n    url,\n  };\n\n  const optionalRequestParameters = dict({\n    ...settings,\n    android,\n    headers,\n    ios,\n    method,\n  }).fallback(BLOB_FETCH_FALLBACK_PARAMETERS);\n\n  return {\n    ...optionalRequestParameters,\n    ...request,\n    taskId,\n  };\n};\n\nconst stringifyPartsValues = (parts: BlobNamedMultipartArray) => {\n  const stringify = (part: BlobMultipartWithName) =>\n    part.type === 'string' && typeof part.payload === 'object'\n      ? { ...part, payload: JSON.stringify(part.payload) }\n      : part;\n\n  return parts.map(stringify);\n};\n\nconst sanitizeMultipartUploadData = <T extends BlobUploadMultipartNativeInput>(\n  input: Readonly<T>\n): BlobUploadMultipartNativeInput => {\n  const { parts, headers, method, returnResponse, url } = input;\n\n  const { taskId } = input;\n\n  const settings = sanitizeSettingsData(input);\n\n  const request = {\n    mimeType: 'multipart/form-data',\n    parts: stringifyPartsValues(parts),\n    url,\n  };\n\n  const optionalRequestParameters = dict({\n    headers,\n    method,\n    returnResponse,\n  }).fallback(BLOB_MULTIPART_UPLOAD_FALLBACK_PARAMETERS);\n\n  return {\n    ...settings,\n    ...optionalRequestParameters,\n    ...request,\n    taskId,\n  };\n};\n\nconst wrapAbortListener = async <T,>(\n  taskId: string,\n  wrappedFn: () => Promise<T>,\n  signal?: AbortSignal\n) => {\n  if (!signal) {\n    return await wrappedFn();\n  }\n\n  const originalSignalOnAbort = signal.onabort;\n\n  // @ts-ignore: TS2345\n  signal.onabort = (ev: Event) => {\n    if (originalSignalOnAbort) {\n      // @ts-ignore: TS2345\n      originalSignalOnAbort.call(signal, ev);\n    }\n\n    (BlobCourier as BlobCourierType).cancelRequest({ taskId });\n\n    console.debug(`Aborted ${taskId}`);\n  };\n\n  return await wrappedFn();\n};\n\nconst wrapEmitter = async <T,>(\n  taskId: string,\n  wrappedFn: () => Promise<T>,\n  fnOnProgress?: (e: BlobProgressEvent) => void\n) => {\n  const emitterSubscription = fnOnProgress\n    ? addProgressListener(taskId, fnOnProgress)\n    : undefined;\n\n  const result = await wrappedFn();\n\n  emitterSubscription?.remove();\n\n  return result;\n};\n\nconst emitterWrappedFetch = <T extends BlobFetchNativeInput>(\n  input: Readonly<T>\n) =>\n  wrapEmitter(\n    input.taskId,\n    () => (BlobCourier as BlobCourierType).fetchBlob(sanitizeFetchData(input)),\n    input.onProgress\n  );\n\nconst emitterWrappedUpload = <T extends BlobUploadMultipartInputWithTask>(\n  input: Readonly<T>\n) =>\n  wrapEmitter(input.taskId, () => uploadBlobFromParts(input), input.onProgress);\n\nconst fetchBlob = <T extends BlobFetchNativeInput>(input: Readonly<T>) =>\n  wrapAbortListener(\n    input.taskId,\n    () => emitterWrappedFetch(input),\n    input.signal\n  );\n\nconst uploadBlobFromParts = <T extends BlobUploadMultipartInputWithTask>(\n  input: Readonly<T>\n) => {\n  try {\n    const sanitized = sanitizeMappedMultiparts(input.parts);\n\n    return (BlobCourier as BlobCourierType).uploadBlob(\n      sanitizeMultipartUploadData({\n        ...input,\n        parts: convertMappedMultipartsWithSymbolizedKeysToArray(sanitized),\n      })\n    );\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n\nconst uploadParts = <T extends BlobUploadMultipartInputWithTask>(\n  input: Readonly<T>\n) =>\n  wrapAbortListener(\n    input.taskId,\n    () => emitterWrappedUpload(input),\n    input.signal\n  );\n\nconst uploadBlob = <T extends BlobUploadNativeInput>(input: Readonly<T>) => {\n  const { absoluteFilePath, filename, mimeType, multipartName } = input;\n\n  return uploadParts({\n    ...input,\n    parts: {\n      [multipartName ?? DEFAULT_FILE_MULTIPART_FIELD_NAME]: {\n        payload: {\n          absoluteFilePath,\n          filename,\n          mimeType,\n        },\n        type: 'file',\n      },\n    },\n  });\n};\n\nconst onProgress = (\n  taskId: string,\n  fn: (e: BlobProgressEvent) => void,\n  requestSettings?: BlobRequestSettings\n) => ({\n  fetchBlob: (input: BlobFetchRequest) =>\n    fetchBlob({\n      ...input,\n      ...requestSettings,\n      onProgress: fn,\n      taskId,\n    }),\n  uploadBlob: (input: BlobUploadRequest) =>\n    uploadBlob({\n      ...input,\n      ...requestSettings,\n      onProgress: fn,\n      taskId,\n    }),\n  uploadParts: (input: BlobUploadMultipartInput) =>\n    uploadParts({\n      ...input,\n      ...requestSettings,\n      onProgress: fn,\n      taskId,\n    }),\n  useDownloadManagerOnAndroid: (\n    downloadManagerSettings?: AndroidDownloadManagerSettings\n  ) =>\n    useDownloadManagerOnAndroid(taskId, downloadManagerSettings, {\n      ...requestSettings,\n      onProgress: fn,\n    }),\n});\n\nconst useDownloadManagerOnAndroid = (\n  taskId: string,\n  downloadManagerSettings?: AndroidDownloadManagerSettings,\n  requestSettings?: BlobRequestSettings & BlobRequestOnProgress\n) => ({\n  fetchBlob: (input: BlobFetchRequest) =>\n    fetchBlob({\n      ...input,\n      ...requestSettings,\n      android: {\n        downloadManager: downloadManagerSettings,\n        useDownloadManager: true,\n      },\n      taskId,\n    }),\n});\n\nconst settings = (taskId: string, requestSettings: BlobRequestSettings) => ({\n  fetchBlob: (input: BlobFetchRequest) =>\n    fetchBlob({\n      ...input,\n      ...requestSettings,\n      taskId,\n    }),\n  onProgress: (fn: (e: BlobProgressEvent) => void) =>\n    onProgress(taskId, fn, requestSettings),\n  uploadBlob: (input: BlobUploadRequest) =>\n    uploadBlob({\n      ...input,\n      ...requestSettings,\n      taskId,\n    }),\n  uploadParts: (input: BlobUploadMultipartInput) =>\n    uploadParts({\n      ...input,\n      ...requestSettings,\n      taskId,\n    }),\n  useDownloadManagerOnAndroid: (\n    downloadManagerSettings?: AndroidDownloadManagerSettings\n  ) =>\n    useDownloadManagerOnAndroid(\n      taskId,\n      downloadManagerSettings,\n      requestSettings\n    ),\n});\n\nexport default {\n  fetchBlob: (input: BlobFetchInput) =>\n    fetchBlob({ ...input, taskId: createTaskId() }),\n  onProgress: (fn: (e: BlobProgressEvent) => void) =>\n    onProgress(createTaskId(), fn),\n  settings: (input: BlobRequestSettings) => settings(createTaskId(), input),\n  uploadBlob: (input: BlobUploadInput) =>\n    uploadBlob({ ...input, taskId: createTaskId() }),\n  uploadParts: (input: BlobUploadMultipartInput) =>\n    uploadParts({ ...input, taskId: createTaskId() }),\n  useDownloadManagerOnAndroid: (\n    downloadManagerSettings: AndroidDownloadManagerSettings\n  ) => useDownloadManagerOnAndroid(createTaskId(), downloadManagerSettings),\n};\n\nexport * from './ExposedTypes';\nexport * from './ExposedConsts';\n"],"mappings":"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"}