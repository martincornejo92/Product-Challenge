{"version":3,"names":["BlobCourier","BlobCourierEventEmitter","NativeModules","EventEmitter","NativeEventEmitter","createTaskId","uuid","addProgressListener","taskId","fn","addListener","BLOB_COURIER_PROGRESS_EVENT_NAME","e","parsedEvent","written","parseInt","total","sanitizeSettingsData","input","progressIntervalMilliseconds","sanitizeFetchData","android","filename","headers","ios","method","mimeType","url","settings","request","optionalRequestParameters","dict","fallback","BLOB_FETCH_FALLBACK_PARAMETERS","stringifyPartsValues","parts","stringify","part","type","payload","JSON","map","sanitizeMultipartUploadData","returnResponse","BLOB_MULTIPART_UPLOAD_FALLBACK_PARAMETERS","wrapAbortListener","wrappedFn","signal","originalSignalOnAbort","onabort","ev","call","cancelRequest","console","debug","wrapEmitter","fnOnProgress","emitterSubscription","undefined","result","remove","emitterWrappedFetch","fetchBlob","onProgress","emitterWrappedUpload","uploadBlobFromParts","sanitized","sanitizeMappedMultiparts","uploadBlob","convertMappedMultipartsWithSymbolizedKeysToArray","Promise","reject","uploadParts","absoluteFilePath","multipartName","DEFAULT_FILE_MULTIPART_FIELD_NAME","requestSettings","useDownloadManagerOnAndroid","downloadManagerSettings","downloadManager","useDownloadManager"],"sources":["index.tsx"],"sourcesContent":["/**\n * Copyright (c) Ely Deckers.\n *\n * This source code is licensed under the MPL-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { NativeEventEmitter, NativeModules } from 'react-native';\nimport {\n  BLOB_COURIER_PROGRESS_EVENT_NAME,\n  BLOB_FETCH_FALLBACK_PARAMETERS,\n  BLOB_MULTIPART_UPLOAD_FALLBACK_PARAMETERS,\n  DEFAULT_FILE_MULTIPART_FIELD_NAME,\n} from './Consts';\nimport './Extensions';\nimport type {\n  BlobFetchRequest,\n  BlobRequestSettings,\n  BlobRequestTask,\n  BlobFetchResponse,\n  BlobUploadRequest,\n  BlobUploadResponse,\n  AndroidDownloadManagerSettings,\n  BlobProgressEvent,\n  BlobRequestOnProgress,\n  BlobMultipartMapUploadRequest,\n  BlobMultipartArrayUploadRequest,\n  BlobNamedMultipartArray,\n  BlobMultipartWithName,\n  BlobFetchInput,\n  BlobUploadInput,\n} from './ExposedTypes';\nimport {\n  convertMappedMultipartsWithSymbolizedKeysToArray,\n  sanitizeMappedMultiparts,\n  uuid,\n} from './Utils';\nimport { dict } from './Extensions';\n\ntype BlobCancelNativeInput = BlobRequestTask;\n\ntype BlobFetchNativeInput = BlobFetchInput & BlobRequestTask;\n\ntype BlobUploadNativeInput = BlobUploadInput & BlobRequestTask;\n\ntype BlobUploadMultipartInput = BlobMultipartMapUploadRequest &\n  BlobRequestSettings;\n\ntype BlobUploadMultipartInputWithTask = BlobMultipartMapUploadRequest &\n  BlobRequestSettings &\n  BlobRequestTask;\n\ntype BlobUploadMultipartNativeInput = BlobMultipartArrayUploadRequest &\n  BlobRequestSettings &\n  BlobRequestTask;\n\ntype BlobCourierType = {\n  cancelRequest(input: BlobCancelNativeInput): Promise<{}>;\n  fetchBlob(input: BlobFetchNativeInput): Promise<BlobFetchResponse>;\n  uploadBlob(\n    input: BlobUploadMultipartNativeInput\n  ): Promise<BlobUploadResponse>;\n};\n\nconst { BlobCourier, BlobCourierEventEmitter } = NativeModules;\n\nconst EventEmitter = new NativeEventEmitter(BlobCourierEventEmitter);\n\nconst createTaskId = () => `rnbc-req-${uuid()}`;\n\nconst addProgressListener = (\n  taskId: string,\n  fn: (e: BlobProgressEvent) => void\n) =>\n  EventEmitter.addListener(BLOB_COURIER_PROGRESS_EVENT_NAME, (e: any) => {\n    const parsedEvent: BlobProgressEvent = {\n      written: parseInt(e.written, 10),\n      total: parseInt(e.total, 10),\n    };\n\n    if (e.taskId === taskId) {\n      fn(parsedEvent);\n    }\n  });\n\nconst sanitizeSettingsData = <T extends BlobRequestSettings>(\n  input: Readonly<T>\n) => {\n  const { progressIntervalMilliseconds } = input;\n\n  return {\n    progressIntervalMilliseconds,\n  };\n};\n\nconst sanitizeFetchData = <T extends BlobFetchNativeInput>(\n  input: Readonly<T>\n): BlobFetchNativeInput => {\n  const { android, filename, headers, ios, method, mimeType, taskId, url } =\n    input;\n\n  const settings = sanitizeSettingsData(input);\n\n  const request = {\n    filename,\n    mimeType,\n    url,\n  };\n\n  const optionalRequestParameters = dict({\n    ...settings,\n    android,\n    headers,\n    ios,\n    method,\n  }).fallback(BLOB_FETCH_FALLBACK_PARAMETERS);\n\n  return {\n    ...optionalRequestParameters,\n    ...request,\n    taskId,\n  };\n};\n\nconst stringifyPartsValues = (parts: BlobNamedMultipartArray) => {\n  const stringify = (part: BlobMultipartWithName) =>\n    part.type === 'string' && typeof part.payload === 'object'\n      ? { ...part, payload: JSON.stringify(part.payload) }\n      : part;\n\n  return parts.map(stringify);\n};\n\nconst sanitizeMultipartUploadData = <T extends BlobUploadMultipartNativeInput>(\n  input: Readonly<T>\n): BlobUploadMultipartNativeInput => {\n  const { parts, headers, method, returnResponse, url } = input;\n\n  const { taskId } = input;\n\n  const settings = sanitizeSettingsData(input);\n\n  const request = {\n    mimeType: 'multipart/form-data',\n    parts: stringifyPartsValues(parts),\n    url,\n  };\n\n  const optionalRequestParameters = dict({\n    headers,\n    method,\n    returnResponse,\n  }).fallback(BLOB_MULTIPART_UPLOAD_FALLBACK_PARAMETERS);\n\n  return {\n    ...settings,\n    ...optionalRequestParameters,\n    ...request,\n    taskId,\n  };\n};\n\nconst wrapAbortListener = async <T,>(\n  taskId: string,\n  wrappedFn: () => Promise<T>,\n  signal?: AbortSignal\n) => {\n  if (!signal) {\n    return await wrappedFn();\n  }\n\n  const originalSignalOnAbort = signal.onabort;\n\n  // @ts-ignore: TS2345\n  signal.onabort = (ev: Event) => {\n    if (originalSignalOnAbort) {\n      // @ts-ignore: TS2345\n      originalSignalOnAbort.call(signal, ev);\n    }\n\n    (BlobCourier as BlobCourierType).cancelRequest({ taskId });\n\n    console.debug(`Aborted ${taskId}`);\n  };\n\n  return await wrappedFn();\n};\n\nconst wrapEmitter = async <T,>(\n  taskId: string,\n  wrappedFn: () => Promise<T>,\n  fnOnProgress?: (e: BlobProgressEvent) => void\n) => {\n  const emitterSubscription = fnOnProgress\n    ? addProgressListener(taskId, fnOnProgress)\n    : undefined;\n\n  const result = await wrappedFn();\n\n  emitterSubscription?.remove();\n\n  return result;\n};\n\nconst emitterWrappedFetch = <T extends BlobFetchNativeInput>(\n  input: Readonly<T>\n) =>\n  wrapEmitter(\n    input.taskId,\n    () => (BlobCourier as BlobCourierType).fetchBlob(sanitizeFetchData(input)),\n    input.onProgress\n  );\n\nconst emitterWrappedUpload = <T extends BlobUploadMultipartInputWithTask>(\n  input: Readonly<T>\n) =>\n  wrapEmitter(input.taskId, () => uploadBlobFromParts(input), input.onProgress);\n\nconst fetchBlob = <T extends BlobFetchNativeInput>(input: Readonly<T>) =>\n  wrapAbortListener(\n    input.taskId,\n    () => emitterWrappedFetch(input),\n    input.signal\n  );\n\nconst uploadBlobFromParts = <T extends BlobUploadMultipartInputWithTask>(\n  input: Readonly<T>\n) => {\n  try {\n    const sanitized = sanitizeMappedMultiparts(input.parts);\n\n    return (BlobCourier as BlobCourierType).uploadBlob(\n      sanitizeMultipartUploadData({\n        ...input,\n        parts: convertMappedMultipartsWithSymbolizedKeysToArray(sanitized),\n      })\n    );\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n\nconst uploadParts = <T extends BlobUploadMultipartInputWithTask>(\n  input: Readonly<T>\n) =>\n  wrapAbortListener(\n    input.taskId,\n    () => emitterWrappedUpload(input),\n    input.signal\n  );\n\nconst uploadBlob = <T extends BlobUploadNativeInput>(input: Readonly<T>) => {\n  const { absoluteFilePath, filename, mimeType, multipartName } = input;\n\n  return uploadParts({\n    ...input,\n    parts: {\n      [multipartName ?? DEFAULT_FILE_MULTIPART_FIELD_NAME]: {\n        payload: {\n          absoluteFilePath,\n          filename,\n          mimeType,\n        },\n        type: 'file',\n      },\n    },\n  });\n};\n\nconst onProgress = (\n  taskId: string,\n  fn: (e: BlobProgressEvent) => void,\n  requestSettings?: BlobRequestSettings\n) => ({\n  fetchBlob: (input: BlobFetchRequest) =>\n    fetchBlob({\n      ...input,\n      ...requestSettings,\n      onProgress: fn,\n      taskId,\n    }),\n  uploadBlob: (input: BlobUploadRequest) =>\n    uploadBlob({\n      ...input,\n      ...requestSettings,\n      onProgress: fn,\n      taskId,\n    }),\n  uploadParts: (input: BlobUploadMultipartInput) =>\n    uploadParts({\n      ...input,\n      ...requestSettings,\n      onProgress: fn,\n      taskId,\n    }),\n  useDownloadManagerOnAndroid: (\n    downloadManagerSettings?: AndroidDownloadManagerSettings\n  ) =>\n    useDownloadManagerOnAndroid(taskId, downloadManagerSettings, {\n      ...requestSettings,\n      onProgress: fn,\n    }),\n});\n\nconst useDownloadManagerOnAndroid = (\n  taskId: string,\n  downloadManagerSettings?: AndroidDownloadManagerSettings,\n  requestSettings?: BlobRequestSettings & BlobRequestOnProgress\n) => ({\n  fetchBlob: (input: BlobFetchRequest) =>\n    fetchBlob({\n      ...input,\n      ...requestSettings,\n      android: {\n        downloadManager: downloadManagerSettings,\n        useDownloadManager: true,\n      },\n      taskId,\n    }),\n});\n\nconst settings = (taskId: string, requestSettings: BlobRequestSettings) => ({\n  fetchBlob: (input: BlobFetchRequest) =>\n    fetchBlob({\n      ...input,\n      ...requestSettings,\n      taskId,\n    }),\n  onProgress: (fn: (e: BlobProgressEvent) => void) =>\n    onProgress(taskId, fn, requestSettings),\n  uploadBlob: (input: BlobUploadRequest) =>\n    uploadBlob({\n      ...input,\n      ...requestSettings,\n      taskId,\n    }),\n  uploadParts: (input: BlobUploadMultipartInput) =>\n    uploadParts({\n      ...input,\n      ...requestSettings,\n      taskId,\n    }),\n  useDownloadManagerOnAndroid: (\n    downloadManagerSettings?: AndroidDownloadManagerSettings\n  ) =>\n    useDownloadManagerOnAndroid(\n      taskId,\n      downloadManagerSettings,\n      requestSettings\n    ),\n});\n\nexport default {\n  fetchBlob: (input: BlobFetchInput) =>\n    fetchBlob({ ...input, taskId: createTaskId() }),\n  onProgress: (fn: (e: BlobProgressEvent) => void) =>\n    onProgress(createTaskId(), fn),\n  settings: (input: BlobRequestSettings) => settings(createTaskId(), input),\n  uploadBlob: (input: BlobUploadInput) =>\n    uploadBlob({ ...input, taskId: createTaskId() }),\n  uploadParts: (input: BlobUploadMultipartInput) =>\n    uploadParts({ ...input, taskId: createTaskId() }),\n  useDownloadManagerOnAndroid: (\n    downloadManagerSettings: AndroidDownloadManagerSettings\n  ) => useDownloadManagerOnAndroid(createTaskId(), downloadManagerSettings),\n};\n\nexport * from './ExposedTypes';\nexport * from './ExposedConsts';\n"],"mappings":"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"}